TA:

Reverse Pairs (Leetcode)
Max no of toys (using B.Search) : https://practice.geeksforgeeks.org/problems/maximum-number-of-toys/1
The delivery Dilemma
https://codeforces.com/problemset/problem/1443/C
Count no of inversions: https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
maximum median: https://codeforces.com/contest/1201/problem/C


later session:
Interview Question >
balancing parenthesis (leetcode)
    using stack (greedy)

if braces are of only one type, we can use a counter, 
at the end, if counter != 0, then its not balanced.

if braces are of two types, then above approach fails for a test case like:
{(})        [arrangement is not right]
so need to use the stack.


Implement Stack:
using array/vector

operations of stack:
push()
pop()
top()
empty()
size()


Constructor: default, parametrized, copy constructor

return type of:
push() : void
pop()  : void
top()  : int
empty(): bool
size() : int
peek() : int


Questions of stack: 
Next greater to, Next Smaller to,

next greater to ith element:
push all the elements from i+1th to n in stack
and keep on popping from stack, until you get an element at top that > ith 
    if stack gets empty, then return -1 (found nothing)
    or if the ith element is the last element, then nothing would be there in its right, so return -1

next smaller element to ith element: 
similar to above, just check <

https://practice.geeksforgeeks.org/problems/next-larger-element-1587115620/1

vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<ll> right;
        vector<ll> ans;
        for(ll i = n - 1; i >= 0; --i) {
            if(right.empty()) ans.push_back(-1);
            else {
                if(right.top() > arr[i]) ans.push_back(right.top());
                else {
                    while(!right.empty() && right.top() <= arr[i]) right.pop();
                    if(right.empty()) ans.push_back(-1);
                    else ans.push_back(right.top());
                }
            }
            right.push(arr[i]);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }


