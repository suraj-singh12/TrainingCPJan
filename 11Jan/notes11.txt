# Dutch National Flag algo
sort 3 numbers in the given array (sort three colors 0, 1, 2)
[3 way partition]

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int start = 0, mid = 0, end = nums.size() -1;
        while(mid <= end) {
            if(nums[mid] == 2) {
                swap(nums[mid], nums[end]);
                end--;
            } else if(nums[mid] == 0) {
                swap(nums[start], nums[mid]);
                start++;    mid++;
            } else mid++;
        }
    }
};


-----------------------------------------------------------

leetcode : make sum divisible by p

leetcode : two sum (using binary search, using sets, using maps, using two pointers)
        (extended euclidean)
        start = 0, end = m * n - 1;
        using single binary search 
        while(start <= end)
            mid = (start + end) / 2;
            x = mid / m;
            y = mid % m;
            if(a[x][y] == target) return true;
            else if(a[x][y] > target) end = mid -1;
            else start = mid + 1;
        return false;

        TC: log(m*n)

code in all ways, submit in one way
explore multiple approaches to solve a given problem, and code in all possible ways!
STRIVER SDE SHEET IS ENOUGH !!!!

Ques on Bsearch:
Sorted array
sorted rotated array
roots of equation
square root function
binary search on 2d matrix
upper bound : element after last occurrence of given element
lower bound : element after first occurrence of given element

in binary search ques, we need to find the search space and that's it!




target = 7, find the a[i] such that a[i] < target
[1,3,5,7,9,11]
 + + + - - - 
+ means good number, - means bad number

if in any range your fn is monotonic (increasing or decreasing or constant), 

bad nums: 1
good nums: 2

    |
    |
2   |        __________________
    |       |
1   |_______|
    |
    |_________________________
ind:0   1   2   3   4    5    6


whenever you do a Binary search, define your good and bad elements (those which follow your rules are good, those which don't are bad)



- - - - - + + + + + + + + + + 
_____________________________
|  Bad   |      Good         |

if x is good, 
and y > x, and y is also good
=> Apply Binary Search in this region

ques eg. min good num, max bad num



+ + + + + + + + + + - - - - -
_____________________________
|      Good        |   Bad   |

if x is good
and y < x, and y is also good
=> Apply Binary Search in this region

ques eg. max good num, min bad num

Whenever you get any question, think if you can apply binary search
if it has atleast one good integer, and atleast one bad integer,
draw the graph, and it's simplified! do it

Ques -> if x = good, is y > x or y < x is also good?(=find good int, bad int) -> draw graph -> solve !




2 D array problem: 
Given n small rectangular boxes dimension w * h, and a big square box dimension l(length). 
Find the minimum length of the square box required to fit all the rectangular boxes into that.

logic?
BS on length. Why?
x -> good
y > x -> good
can apply BS.

- - - - - + + + + + + + +
_________________________

n rectangles

so for the square: 
minimum length = noOfRectangles * min(w, h)
maximum length = noOfRectagles * max(w, h)

n*min(w,h) -> n * max(w, h)

or from 
0 -> n * max(w, h)



s = 0, e = n * max(w, h)
while(e - s > 1)
mid = s + (e - s) / 2
if(good(mid)) 
    e = mid;
else 
    s = mid;

e is keeping track of good integers, that's why we doing e = mid, not e = mid - 1
s is keeping track of bad integers, that's why we do s = mid, not s = mid + 1

implement good(): 
if(mid/h * mid/w >= n) return good
else return bad

in below chances of overflow are very very high!!
[
if(mid * mid >= n*(w * h)) return good
else return bad
]




