Problems 1-600 LtCode   [best]

-------------------------------------------
# Time Complexity:
TC != Time taken by system

the time taken by an algorithm to perform its work, like linear, quadratic, or exponential time, which is measured in terms of no of operations performed. 

Rate at which the time taken by system increases as the no of input increases.

-------------------------------------------
# Big O Notation:
tells the upper bound of an algorithm, ie. the worst case time complexity

# Why worst case TC consideration?
because we need to ensure our code works in worst scenarios too, only then it is reliable and can be used by everyone.
For example google finds out even the smallest details that we search for. They are harder to find, but it still does.
..

-------------------------------------------
# Time complexity:
ignore constants, ignore small order constants, only higher order remains and is written in Big-O Notation

->Practise
for i = 1 -> n:
    for j = 1 -> i:
        O(1) work

for i = 1: j iteration = 1              total ops : 1
for i = 2: j iteration = 1 2            total ops : 2
for i = 3: j iteration = 1 2 3          total ops : 3
...    ....    ..      ....             .... .   ....
for i = n: j iteration = 1 2 3 ... n    total ops : n

=> operations done: 1 2 3 4 .... n = n * (n + 1)/ 2 = O(n^2)
TC:  n * (n + 1) / 2 = O(n^2)

-------------------------------------------
# Binary Search
1.2.2.2.2.2....x times  = n
=> 1.2^x  = 2^x = n
=> 2^x = n                => x = logn
=> TC: O(logn)

-------------------------------------------
# Space complexity
Extra space apart from input space used to solve a problem is called it's space complexity.

# TC in Contests
10^8 operations approx. takes 1 second = O(n)
so when server says time limit = 1s, that means max 10^8 ops is expected max.
when time limit = 2s => 2*10^8 ops allowed

# Prime Numbers
d1 <= sqrt(n)
where d1 = smaller of the pair of two factors of n
let n = 20
(1, 20) : both 1, 20 divide 20
(2, 10) : both 2, 10 divide 20
(4, 5)  : both 4, 5 divide 20

so 1, 2, 4 the smaller numbers in pairs, all divide the number n
so we need to check if any number in the range from [2->sqrt(n)] divides it, to find if a number is prime or not! 
if divides, the number n is not prime, else prime.

d1 <= sqrt(20)   = near to 4

> Note: sqrt() function is implemented using Binary Search
> so TC of sqrt(): O(logn)

# Note: Perfect squares will have odd no of factors 
4 (1,2,4), 25 (1,5,25), 49 (1,7, 49)

# int range: 2^31
# long long range: 2^63

-------------------------------------------
newbie prime checking:
for i = [2 -> n):
    if n % i == 0 : return not prime
end for
return prime

TC: O(n), SC: O(1)

optimized prime checking
for i = [2 -> sqrt(n)]:
    if n % i == 0: return not prime
end for
return prime

TC: O(sqrt(n)), SC: O(1)
-------------------------------------------

# generate prime factors of a number n
1. generate factors of number, and for each factor check if is prime, if yes print.
2. generate sieve, then for each factor check if in sieve (set)

3. while 2, for i = 3 -> root(n) i+= 2, while divisible, print i
void checkPrime(n):
    if(n <= 1) return;
    if(n % 2 == 0):
        while(n % 2 == 0): n /= 2;
        print 2
    for i = [3 -> sqrt(n)]; i+= 2:
        if(n % i == 0):
            while(n % i == 0): n /= i;
            print i
    if n > 1: print n                   // if in case remaining n, or original n is prime, then it will get caught here
    <!-- 
    let n = 10
    2: 10 -> 5
    in loop 3: break (condition failed (3*3 <= 5))
    last check n > 1: yes print 5
     -->
    return;

TC: O(sqrt(n))              [how? suppose n = prime, in that case we will go till sqrt(n);  n = 121, we will go till 11]
50 : 2 5 10 25 50

50 25 5 1 [3,5
2 5


Generating prime numbers till n
using primality test 
for i = 2 -> n:
    if prime(i) add to ds

TC: O(n * sqrt(n))
so here comes sieve, better than this approach


# Sieve of eratosthenes
TC: O(nloglogn)
To find prime numbers in a range, we use sieve and precompute all prime numbers in the range of n
then we fetch them in O(1) easily


vector<int> primeNums;
void sieve(n):
    vector<bool> prime(n + 1, true);
    for(int p = 2; p * p <= n; ++p)
        if(prime[p]) 
            //all multiples of p, are not prime, so set them false
            for(int i = p * p; i <= n; i += p) 
                primes[i] = false;
    
    for(int p = 2; p <= n; ++p)
        if(prime[p]) primeNums.push_back(p);

    return;

// at the end, primeNums contains all the prime numbers in the range [2->n]


## Practise Session: 

# kth prime number in range of n [keep a ctr in sieve, as soon ctr == k, print the val, and return]

# print the smallest prime and largest prime number dividing a given number n
    approach1: generate prime factors of the number n (O(sqrt(n))), return first and last prime factor! 
    approach2: sieve()
               return first and last no which divides given n

# find the lowest and highest prime divisor for each number till n
    (using sieve: O(nloglogn) optimized)

# inclusion exclusion principle (permutation / combination)
    like envelop dearrangement, 
    say 4 people have their letters in 4 envelop, now in how many ways we can give the envelop in such a way that none of them gets the correct.

# Given an array of numbers say [2,3,5,7,11]
  upto m how many numbers are there which are not divisible by any of these of numbers
  https://www.codechef.com/problems/DIVISIBLEBY     [checkout, would be helpful in solving]
  count the no of elements which are <= m
  given m <= 1e6,   arr[i] <= 50


P(a union b) = P(a) + P(b) - P(a intersection b)
   (2, 3)   =   a   +  b   - lcm(2, 3) [6]
   (2,4)    =   a   +  b   - lcm(2, 4) [4]

